<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 指定命名空间，必须和接口的mapper路径一直 -->
<mapper namespace="dao.UserDao">


	<!-- 映射结果集，把sql查询到的数据映射到userVo上 -->
	<!-- 可以使用继承 -->
	<resultMap type="entity.UserVo" id="userVoMap">
		<!--id唯一标识 column:查询出来的列名
		 property:vo中的属性名 -->
		<id column="id" property="id" />
		<!--普通列的定义 -->
		<result column="userName" property="name" />
		<result column="password" property="pwd" />
		
		<!--一对一  -->
		<!-- 把结果映射到vo里面的单个user对象中 -->
		<!-- 
		select:使用此属性，传入其它statement的id，可以进行“延迟加载”关联 
		column：关联查询所使用的外键
		-->
		
		<association property="user" javaType="entity.User" >
			
			<!--id:user的唯一标识  
				property:映射到user的哪个属性上
			-->
			<id column="id" property="id"/>
			
			<result column="userName" property="userName"/>
			<result column="password" property="password"/>
		</association>
		
		<!-- 一对多 -->
		<!-- 映射多条记录
			column:查询出来的列名
			property：映射到vo里的哪个属性对象中
			ofType:集合中的实体类类型
		 -->
<!-- 		<collection property="accounts" ofType="xxxxxxx(还未创建)">
			<id column="accountId" property="id"/>
			<result column="userId" property="userId"/>
			
		</collection> -->
	</resultMap>

	<!-- 使用映射结果集，把查询结果映射到vo上 -->
	<select id="findUserVoList" parameterType="user" resultMap="userVoMap">
		select a.id,a.user_name as userName,password as password from
		sys_users a
		<where>
			<if test="userName != null and userName !=''">
				and a.user_name like CONCAT('%',#{userName},'%')
			</if>
			<if test="password != null and passwrod !=''">
				and a.password like CONCAT('%',#{password},'%')
			</if>

		</where>
	</select>





	<!-- #{}：参数都当成字符串解析（防止sql注入） -->
	<!-- ${}:传什么拼成什么，不加任何修饰拼接到sql中 -->
	<!-- resultType属性，表示查询到的数据所映射的实体类型 -->
	<!-- parameterType：参数类型， 使用#简单类型参数名称随意 使用$简单类型只能使用value -->
	<!-- 如果使用mapper代理，参数类型和返回值类型必须与接口中的一致 -->
	<select id="get" parameterType="java.lang.Integer" resultType="entity.User">
		select a.id,a.user_name as userName,password as password from
		sys_users a where a.id=#{id}
	</select>

	<select id="findList" parameterType="user" resultType="user">
		select a.id,a.user_name as userName,password as password from
		sys_users a
		<where>
			<if test="userName != null and userName !=''">
				and a.user_name like CONCAT('%',#{userName},'%')
			</if>
			<if test="password != null and passwrod !=''">
				and a.password like CONCAT('%',#{password},'%')
			</if>

		</where>
	</select>


	<!-- 通过OGNL表达式获取对象属性值 -->
	<insert id="insert" parameterType="entity.User">
		insert into sys_users(user_name,password)
		values(#{userName},#{password})

		<!-- 在执行了insert的之后，再查询出id返回出来 -->
		<!--keyProperty：要将查询到的值设置到parameterType的哪个属性上 -->
		<!--order:时机，是在insert之前执行还是之后执行 -->
		<!--resultType:指定返回值的类型 -->
		<!--ps:可使用before，在此调用DB里自带的其它获取id的函数进行id创建 -->
		<selectKey keyProperty="id" order="AFTER" resultType="long">
			select last_insert_id()
		</selectKey>
	</insert>

	<update id="update" parameterType="entity.User">
		update sys_users a set a.user_name = #{userName}, a.password = #{password}
		where a.id=#{id}
	</update>


	<delete id="delete" parameterType="int">
		delete from sys_users where id = #{id}
	</delete>

</mapper>